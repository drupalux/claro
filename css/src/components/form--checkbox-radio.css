/**
 * @file
 * Checkbox and radio input elements.
 */

/**
 * When form items are nested in radios or checkboxes group, reduce the default
 * space between them.
 */
.form-radios .form-item,
.form-checkboxes .form-item {
  margin-top: 0.4em;
  margin-bottom: 0.4em;
}
.form-radios .form-item:first-child,
.form-checkboxes .form-item:first-child {
  margin-top: 0;
}
.form-radios .form-item:last-child,
.form-checkboxes .form-item:last-child {
  margin-bottom: 0;
}

/**
 * Form item modifiers.
 */
.form-type--checkbox,
.form-type--radio {
  margin-left: 1.5em; /* 24px */
}
[dir=rtl] .form-type--checkbox,
[dir=rtl] .form-type--radio {
  margin-right: 1.5em;
  margin-left: 0;
}

/**
 * Input elements.
 */
input[type="checkbox"],
input[type="radio"] {
  margin-left: calc(-15em / 16); /* -24px */
  position: absolute;
  margin-top: 1em;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  word-wrap: normal;
}
[dir=rtl] input[type="checkbox"],
[dir=rtl] input[type="radio"] {
  margin-right: -1.5em; /* -24px */
  margin-left: 0;
}

.option {
  position: relative;
}

/**
 * Option without visible label (e.g. Languages admin form).
 */
.form-item--no-label > .option {
  display: inline-block;
}

/**
 * Semi-checkbox and semi-radio (pseudo elements of the label).
 */
input[type="checkbox"] + .option::before,
input[type="radio"] + .option::before {
  display: inline-block;
  position: absolute;
  top: 50%;
  left: calc(-24em / 14);
  width: calc(18em / 14);
  height: calc(18em / 14);
  transform: translateY(-50%);
  transition: all linear var(--speed-transition) 0s;
  border: calc(1em / 14) solid var(--color-input-border); /* 1px */
  border-radius: calc(2em / 14); /* 2px */
  background: var(--color-input-bg);
  color: white;
  content: "";
  box-sizing: border-box;
  text-align: center;
  line-height: calc(16em / 14);
}
input[type="radio"] + .option::before {
  border-radius: calc(9em / 14); /* 9px */
}
[dir="rtl"] input[type="checkbox"] + .option::before,
[dir="rtl"] input[type="radio"] + .option::before {
  right: calc(-24em / 14);
  left: 0;
}

/**
 * Checkbox states (empty).
 */

/* Checkbox focus state. */
input[type="checkbox"]:focus + .option::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow);
}
/* Checkbox :hover. */
input[type="checkbox"] + .option:hover::before {
  box-shadow: inset 0 0 0 calc(1em / 14) var(--color-input-border-hover);
  border-color: var(--color-input-border-hover);
}
/* Checkbox :focus:hover. */
input[type="checkbox"]:focus + .option:hover::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow), inset 0 0 0 calc(1em / 14) var(--color-input-border-hover);
  border-color: var(--color-input-border-hover);
}
/* Active state by keyboard — focus state is active */
input[type="checkbox"]:active + .option::before,
/* Active state by pointer or tap - no focus on the input, we have to manually emit it. */
input[type="checkbox"]:active + .option:hover::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow), inset 0 0 0 calc(1em / 14) var(--color-input-border-hover);
  border-color: var(--color-input-border-hover);
}

/**
 * Checkbox - checked states.
 */
input[type="checkbox"]:checked + .option::before {
  content: '\2713';
  background: var(--color-input-border-focus);
  border-color: var(--color-input-border-focus);
}
/* Checkbox :checked:focus state. */
input[type="checkbox"]:checked:focus + .option::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow);
}
/* Checkbox :checked:hover. */
input[type="checkbox"] + .option:hover::before {
  box-shadow: inset 0 0 0 calc(1em / 14) var(--color-input-border-hover);
  border-color: var(--color-input-border-hover);
}
/* Checkbox :checked:focus:hover. */
input[type="checkbox"]:checked:focus + .option:hover::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow);
  border-color: var(--color-input-fg);
  background: var(--color-input-fg);
}
/* Active state by keyboard — focus state is active */
input[type="checkbox"]:checked:active + .option::before,
/* Active state by pointer or tap - no focus on the input. */
input[type="checkbox"]:checked:active + .option:hover::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow);
  border-color: var(--color-input-fg);
  background: var(--color-input-fg);
}

/**
 * Radio states (empty).
 */

/* Radio focus state. */
input[type="radio"]:focus + .option::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow);
}
/* Radio :hover. */
input[type="radio"] + .option:hover::before {
  box-shadow: inset 0 0 0 calc(1em / 14) var(--color-input-border-hover);
  border-color: var(--color-input-border-hover);
}
/* Radio :focus:hover. */
input[type="radio"]:focus + .option:hover::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow), inset 0 0 0 calc(1em / 14) var(--color-input-border-hover);
  border-color: var(--color-input-border-hover);
}
/* Active state by keyboard — focus state is active */
input[type="radio"]:active + .option::before,
/* Active state by pointer or tap - no focus on the input, we have to manually emit it. */
input[type="radio"]:active + .option:hover::before {
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow), inset 0 0 0 calc(1em / 14) var(--color-input-border-hover);
  border-color: var(--color-input-border-hover);
}
/**
 * Radio - checked states.
 */
input[type="radio"]:checked + .option::before {
  /* content: '\25cf'; */
  background: var(--color-input-border-focus);
  border-color: var(--color-input-border-focus);
  box-shadow: inset 0 0 0 calc(1em / 14) var(--color-input-border-focus), inset 0 0 0 calc(4em / 14) var(--color-input-bg);
}
/* Radio :checked:focus state. */
input[type="radio"]:checked:focus + .option::before {
  /* box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow); */
  background: var(--color-input-border-focus);
  border-color: var(--color-input-border-focus);
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow), inset 0 0 0 calc(1em / 14) var(--color-input-border-focus), inset 0 0 0 calc(4em / 14) var(--color-input-bg);
}
/* Radio :checked:hover. */
input[type="radio"]:checked + .option:hover::before {
  background: var(--color-input-fg);
  border-color: var(--color-input-fg);
  box-shadow: inset 0 0 0 calc(1em / 14) var(--color-input-fg), inset 0 0 0 calc(4em / 14) var(--color-input-bg);
}
/* Radio :checked:focus:hover. */
/* Active state by keyboard — focus is active */
input[type="radio"]:checked:active + .option::before,
input[type="radio"]:checked:focus + .option:hover::before {
  background: var(--color-input-fg);
  border-color: var(--color-input-fg);
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow), inset 0 0 0 calc(1em / 14) var(--color-input-fg), inset 0 0 0 calc(4em / 14) var(--color-input-bg);
}
/* Active state by pointer or tap - no focus on the input. */
input[type="radio"]:checked:active + .option:hover::before {
  background: var(--color-input-fg);
  border-color: var(--color-input-fg);
  box-shadow: 0 0 0 calc(4em / 14) var(--color-input-focus-shadow), inset 0 0 0 calc(1em / 14) var(--color-input-fg), inset 0 0 0 calc(4em / 14) var(--color-input-bg);
}

/**
 * Disabled.
 */

/**
 * Error.
 */

@media screen and (max-width: 600px) {
  input[type="checkbox"],
  input[type="radio"] {
    width: auto;
  }
}
